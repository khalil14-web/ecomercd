// ๐ ุงุณุชูุฑุงุฏ ุงูุฃุฏูุงุช ูุงูุฃููุงุน ุงูุฃุณุงุณูุฉ
import { Model, Document } from "mongoose"; // ูู Mongoose: Model ูุฅูุดุงุก ุนูููุงุช CRUD ู Document ูุชูุซูู ุงููุซุงุฆู
import AppError from "../utils/AppError"; // ูุงุฆู ูุฎุตุต ูุฅูุดุงุก ุฃุฎุทุงุก ุงุญุชุฑุงููุฉ
import { catchError } from "../utils/catchError"; // ุฏุงูุฉ ุชุบูู ุงูุฏูุงู async ูุชูุงุฏู ุชูุฑุงุฑ try/catch
import { Request, Response, NextFunction } from "express"; // ุฃููุงุน Express ูููุฒูุฏ ูู ุงูุฃูุงู ูู TypeScript
import APIFeatures from "../utils/APIFeatures"; // ููุงุณ ุฎุงุต ุจุงูุชุญูู ูู ุงูุจุญุซุ ุงููุฑุฒุ ุงูุชุตููุฉุ ุงูุชุฑููู...

//!   app.post("/products/:id", (req, res) => {
  //!   console.log("Params:", req.params);
 //!    console.log("Query:", req.query);
  //!   console.log("Body:", req.body);
  //!   console.log("Headers:", req.headers);
  //!   res.send("Data received");
//!   });
//!   POST /products/45?sort=price
//!   Content-Type: application/json

//!   {
 //!    "name": "iPhone",
 //!    "price": 999
//!   }
//!   Params: { id: "45" }
//!   Query: { sort: "price" }
//!   Body: { name: "iPhone", price: 999 }
//!   Headers: { content-type: "application/json", ... }

// ====================================================================
// ๐น 1. ุฅูุดุงุก ูุณุชูุฏ ุฌุฏูุฏ (Create)
// ====================================================================
// <T extends Document> : ุชุนุฑูู ุงูููุน ุงูุนุงู ุงูุฐู ูุฌุจ ุฃู ูููู ูุซููุฉ Mongoose
// Model: ุงููููุฐุฌ (Product, User...)
// ModelName?: ุงุณู ุงููููุฐุฌ ููุท ูุนุฑุถู ูู ุงูุฑุณุงูุฉ
export const createEntitiy = <T extends Document>(
  Model: Model<T>,
  ModelName?: string
) =>
  catchError(async (req: Request, res: Response, next: NextFunction) => {
    // ุฅูุดุงุก ูุณุชูุฏ ุฌุฏูุฏ ุฏุงุฎู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู ุงูุจูุงูุงุช ุงููุฑุณูุฉ ูู body
    const doc = await Model.create(req.body);

    // ุฅุฑุณุงู ุฑุฏ ูุงุฌุญ ูุน ุงููุซููุฉ ุงูุชู ุชู ุฅูุดุงุคูุง ูุฑุณุงูุฉ
    res.status(200).json({
      data: { doc },
      message: `${ModelName} created successfully`,
    });
  });

// ====================================================================
// ๐น 2. ุฌูุจ ูุณุชูุฏ ูุงุญุฏ ุญุณุจ ุงูู ID (Read One)
// ====================================================================
export const getEntitiy = <T extends Document>(Model: Model<T>) =>
  catchError(async (req: Request, res: Response, next: NextFunction) => {
    // ุงุณุชุฎุฑุงุฌ id ูู ุงูุฑุงุจุท ูุซู /products/:id
    const { id } = req.params;

    // ุงูุจุญุซ ุนู ุงููุณุชูุฏ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const doc = await Model.findById(id);

    // ุฅุนุงุฏุฉ ุงููุชูุฌุฉ ุฅูู ุงูุนููู
    res.status(200).json({ data: { doc } });
  });

// ====================================================================
// ๐น 3. ุฌูุจ ุฌููุน ุงููุณุชูุฏุงุช ูุน ุงูููุชุฑุฉ ูุงููุฑุฒ ูุงูุชูุณูู ุฅูู ุตูุญุงุช (Read All)
// ====================================================================
export const getAllEntitiy = <T extends Document>(Model: Model<T>) =>
  catchError(async (req: Request, res: Response, next: NextFunction) => {
    console.log(req);

    // ุฅูุดุงุก ูุงุฆู APIFeatures ููุชุญูู ูู ุงูุงุณุชุนูุงูุงุช
    // Model.find() = ุงุณุชุนูุงู ุฃููู ูุฌูุจ ูู ุงููุซุงุฆู
    // req.query = ุงููุนุงููุฑ ุงููุงุฏูุฉ ูู ุงูุฑุงุจุท ูุซู ?page=2&limit=10&sort=price
    const docs = await new APIFeatures(Model.find(), req.query)
      .paginate()     // ุชูุณูู ุงููุชุงุฆุฌ ุฅูู ุตูุญุงุช
      .filter()       // ุชุทุจูู ุงูููุงุชุฑ (ูุซู category ุฃู ุงูุณุนุฑ)
      .sort()         // ุชุฑุชูุจ ุงููุชุงุฆุฌ (asc/desc)
      .limitFields()  // ุชุญุฏูุฏ ุงูุญููู ุงูุชู ุณุชุธูุฑ ูู ุงููุชุงุฆุฌ
      .query;         // ุงููุชูุฌุฉ ุงูููุงุฆูุฉ ููุงุณุชุนูุงู ุจุนุฏ ูู ุงูุนูููุงุช

    // ุญุณุงุจ ุฅุฌูุงูู ุนุฏุฏ ุงููุซุงุฆู ูุชูููุฏ ุนุฏุฏ ุงูุตูุญุงุช
    const totalCount = await Model.countDocuments();
    const totalPages = Math.floor(
      totalCount / (req.query.limit ? +req.query.limit : 10)
    );

    // ุฅุฑุณุงู ุงููุชูุฌุฉ
    res.status(200).json({
      data: { docs },
      totalPages,
    });
  });

// ====================================================================
// ๐น 4. ุชุนุฏูู ูุณุชูุฏ (Update)
// ====================================================================
export const updateEntitiy = <T extends Document>(Model: Model<T>) =>
  catchError(async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    // ุชุญุฏูุซ ุงููุณุชูุฏ ุญุณุจ ุงูู id ูุฅุฑุฌุงุน ุงููุณุฎุฉ ุงูุฌุฏูุฏุฉ {new:true}
    const doc = await Model.findByIdAndUpdate(id, req.body, { new: true });

    // ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุซููุฉ โ ุฃุฑุณู ุฎุทุฃ ูุฎุตุต
    if (!doc) return next(new AppError("No document found with this id", 404));

    // ุฑุฏ ูุงุฌุญ ูุน ุงููุซููุฉ ุงููุญุฏุซุฉ
    res.status(200).json({ data: { doc } });
  });

// ====================================================================
// ๐น 5. ุญุฐู ูุณุชูุฏ (Delete)
// ====================================================================
export const deleteEntitiy = <T extends Document>(Model: Model<T>) =>
  catchError(async (req: Request, res: Response, next: NextFunction) => {
    const { id } = req.params;

    // ุญุฐู ุงููุณุชูุฏ ุญุณุจ ุงูู id
    const doc = await Model.findByIdAndDelete(id);

    // ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนููู โ ุฃุฑุณู ุฎุทุฃ
    if (!doc) return next(new AppError("No document found with this id", 404));

    // ุฑุฏ ูุฌุงุญ ุจุณูุท
    res.status(200).json({ message: "Successfully deleted" });
  });
