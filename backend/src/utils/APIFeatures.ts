/**
 * ============================================================
 * โ๏ธ Class: APIFeatures
 * ============================================================
 * ุงููุฏู (Purpose):
 * - ุชูุณุชุฎุฏู ูุจูุงุก ุงูุงุณุชุนูุงูุงุช ุงูุฏููุงููููุฉ (Dynamic Queries) ูู MongoDB.
 * - ุชุณุงุนุฏ ุนูู ุชุทุจูู ุงูููุชุฑุฉุ ุงูุชุฑุชูุจุ ุชุญุฏูุฏ ุงูุญูููุ ูุงูุตูุญุงุช (pagination)
 *   ูู ุฎูุงู ุงููุนุงููุงุช ุงููุงุฏูุฉ ูู ุงููุณุชุฎุฏู (req.query).
 *
 * Example:
 * new APIFeatures(Model.find(), req.query)
 *   .filter()
 *   .sort()
 *   .limitFields()
 *   .paginate();
 */

import { Query } from "mongoose";

class APIFeatures<T> {
  public query: Query<T[], T>; // ๐น ูุงุฆู ุงูุงุณุชุนูุงู ุงูุฎุงุต ุจู Mongoose (Mongoose query object)
  private queryString: Record<string, any>; // ๐น ุงููุนุงููุงุช ุงููุงุฏูุฉ ูู ุงููุณุชุฎุฏู (Client query parameters)

  /**
   * ------------------------------------------------------------
   * ๐๏ธ Constructor
   * ูุชู ุงุณุชุฏุนุงุคู ุนูุฏ ุฅูุดุงุก ูุงุฆู ุฌุฏูุฏ ูู APIFeatures
   * ------------------------------------------------------------
   * @param query - ุงุณุชุนูุงู Mongoose ูุซู Model.find()
   * @param queryString - ูุนุงููุงุช ุงูุจุญุซ ุงููุงุฏูุฉ ูู req.query
   */
  constructor(query: Query<T[], T>, queryString: Record<string, any>) {
    this.query = query;
    this.queryString = queryString;
  }

  /**
   * ============================================================
   * ๐ FILTER
   * ============================================================
   * - ูุฒูู ุงูุญููู ุงูุฎุงุตุฉ ุจุงููุฑุฒ ุฃู ุงูุชุญุฏูุฏ ุฃู ุงูุตูุญุงุช.
   * - ูุถูู ูุนุงููุงุช MongoDB ูุซู $gte ู $lte ุชููุงุฆููุง.
   * Example: ?price[gte]=500 โ { price: { $gte: 500 } }
   */
  filter(): this {
    const queryObj = { ...this.queryString }; // ูุณุฎ ุงููุงุฆู ุงูุฃุตูู ูุชุฌููุจ ุชุบููุฑู
    const excludeFields = ["page", "sort", "limit", "fields"]; // ุงูุญููู ุงูุชู ูุง ุชูุณุชุฎุฏู ููููุชุฑุฉ

    excludeFields.forEach((el) => delete queryObj[el]); // ุญุฐู ุงูุญููู ุบูุฑ ุงููุฑุบูุจุฉ

    // ุชุญููู ุงููุงุฆู ุฅูู string ููุจุญุซ ุนู ุงููุดุบููุงุช (operators)
    let queryStr = JSON.stringify(queryObj);

    // ๐ ุงุณุชุจุฏุงู gte, gt, lte, lt ุจู $gte, $gt, ...
    queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);

    // ุชุทุจูู ุงูููุชุฑุฉ ุนูู ุงูุงุณุชุนูุงู
    this.query = this.query.find(JSON.parse(queryStr));

    return this; // ูุชูููู "method chaining"
  }

  /**
   * ============================================================
   * โ๏ธ SORT
   * ============================================================
   * - ูุณูุญ ุจุชุฑุชูุจ ุงููุชุงุฆุฌ ุญุณุจ ุญูู ูุนูู (ูุซู ุงูุณุนุฑ ุฃู ุงูุชุงุฑูุฎ)
   * Example: ?sort=price,-rating
   */
  sort(): this {
    if (this.queryString.sort) {
      const sortBy = this.queryString.sort.split(",").join(" "); // ุชุญููู ุงููุงุตูุฉ ุฅูู ูุณุงูุฉ
      this.query = this.query.sort(sortBy);
    } else {
      this.query = this.query.sort("-createdAt"); // ุชุฑุชูุจ ุงูุชุฑุงุถู ุจุงูุชุงุฑูุฎ ุชูุงุฒูููุง
    }
    return this;
  }

  /**
   * ============================================================
   * ๐งฉ LIMIT FIELDS
   * ============================================================
   * - ูุณูุญ ูููุณุชุฎุฏู ุจุชุญุฏูุฏ ุงูุญููู ุงููุฑุงุฏ ุนุฑุถูุง ููุท.
   * Example: ?fields=name,price โ ูุนุฑุถ ููุท ูุฐูู ุงูุญูููู
   */
  limitFields(): this {
    if (this.queryString.fields) {
      const fields = this.queryString.fields.split(",").join(" ");
      this.query = this.query.select(fields);
    } else {
      this.query = this.query.select("-__v"); // ุฅุฎูุงุก ุญูู ุงููุณุฎุฉ ุงูุฏุงุฎููุฉ ุงูุชุฑุงุถููุง
    }
    return this;
  }

  /**
   * ============================================================
   * ๐ PAGINATION
   * ============================================================
   * - ูุชูุณูู ุงููุชุงุฆุฌ ุฅูู ุตูุญุงุช.
   * Example: ?page=2&limit=10 โ ูุชุฌุงูุฒ ุฃูู 10 ูุชุงุฆุฌ ููุนุฑุถ ุงูุชุงููุฉ
   */
  paginate(): this {
    const page = this.queryString.page * 1 || 1; // ุงูุตูุญุฉ ุงูุญุงููุฉ (default = 1)
    const limit = this.queryString.limit * 1 || 100; // ุนุฏุฏ ุงููุชุงุฆุฌ ูู ุงูุตูุญุฉ
    const skip = (page - 1) * limit; // ุนุฏุฏ ุงููุชุงุฆุฌ ุงูุชู ุณูุชู ุชุฌุงูุฒูุง

    this.query = this.query.skip(skip).limit(limit);

    return this;
  }
}

export default APIFeatures;

/**
 * ============================================================
 * ๐ก Note:
 * Why `find().find()` doesnโt execute twice:
 * - Mongoose doesnโt run the first `find()` immediately.
 * - It just merges the filter conditions into one single query.
 * ============================================================
 */
